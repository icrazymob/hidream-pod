#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ LoRA –ª–∏—Ü–∞ —Å HiDream I1
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è 10-20 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∏—Ü–∞
"""

import os
import sys
import shutil
import subprocess
import argparse
from pathlib import Path
import time

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA
    try:
        import torch
        if not torch.cuda.is_available():
            raise RuntimeError("CUDA –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!")
        print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.get_device_name(0)}")
        print(f"üìä VRAM: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HuggingFace —Ç–æ–∫–µ–Ω–∞
    hf_token = os.getenv('HF_TOKEN')
    if not hf_token:
        print("‚ö†Ô∏è  HF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ gated –º–æ–¥–µ–ª—è–º.")

def prepare_dataset(input_dir, output_dir, trigger_word):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    print(f"üìÇ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑ {input_dir}...")
    
    input_path = Path(input_dir)
    output_path = Path(output_dir)
    
    if not input_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {input_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_path.mkdir(parents=True, exist_ok=True)
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = {'.jpg', '.jpeg', '.png', '.webp', '.bmp'}
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_count = 0
    for img_file in input_path.iterdir():
        if img_file.suffix.lower() in image_extensions:
            # –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            new_name = f"{trigger_word}_{image_count:03d}{img_file.suffix}"
            new_path = output_path / new_name
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(img_file, new_path)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            caption_path = new_path.with_suffix('.txt')
            with open(caption_path, 'w', encoding='utf-8') as f:
                f.write(f"—Ñ–æ—Ç–æ {trigger_word}, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–∏—Ü–æ")
            
            image_count += 1
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {new_name}")
    
    if image_count == 0:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        sys.exit(1)
    
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤
    if image_count < 10:
        recommended_steps = 800
        print("‚ö†Ô∏è  –ú–∞–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (<10). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ.")
    elif image_count <= 20:
        recommended_steps = 1200
    else:
        recommended_steps = 1500
        print("‚ö†Ô∏è  –ú–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (>20). –í–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ.")
    
    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {recommended_steps}")
    return image_count, recommended_steps

def update_config(config_path, trigger_word, dataset_path, steps):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("‚öôÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    with open(config_path, 'r', encoding='utf-8') as f:
        config = f.read()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É
    config = config.replace('/workspace/training_data', str(dataset_path))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    config = config.replace('steps: 1500', f'steps: {steps}')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç—ã —Å trigger word
    config = config.replace('[trigger]', trigger_word)
    
    with open(config_path, 'w', encoding='utf-8') as f:
        f.write(config)
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

def run_training(config_path):
    """–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...")
    print("üìù –õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ training.log")
    
    cmd = [
        'python', '/workspace/ai-toolkit/run.py',
        config_path
    ]
    
    # –ó–∞–ø—É—Å–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    with open('/workspace/training.log', 'w') as log_file:
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        for line in process.stdout:
            print(line.strip())
            log_file.write(line)
            log_file.flush()
        
        process.wait()
        return process.returncode

def main():
    parser = argparse.ArgumentParser(description='–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ LoRA –ª–∏—Ü–∞ –¥–ª—è HiDream I1')
    parser.add_argument('--input_dir', required=True, help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏')
    parser.add_argument('--trigger_word', required=True, help='–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ LoRA')
    parser.add_argument('--output_dir', default='/workspace/output', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏')
    parser.add_argument('--steps', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–≤—Ç–æ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)')
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("üé≠ HiDream I1 Face LoRA Trainer")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_environment()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    dataset_dir = '/workspace/training_data'
    image_count, recommended_steps = prepare_dataset(
        args.input_dir, 
        dataset_dir, 
        args.trigger_word
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RTX 3090)
    if args.steps:
        steps = args.steps
    else:
        # –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–º –æ–ø—ã—Ç–µ —Å diffusion-pipe: 111 —Ñ–æ—Ç–æ = ~4440 —à–∞–≥–æ–≤ (10 —ç–ø–æ—Ö)
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
        if image_count <= 10:
            steps = 600
        elif image_count <= 15:
            steps = 800  
        elif image_count <= 20:
            steps = 1000
        else:
            steps = 1200
            print("‚ö†Ô∏è  –ú–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (>20). –í–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = '/workspace/train_config.yaml'
    update_config(config_path, args.trigger_word, dataset_dir, steps)
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    Path(args.output_dir).mkdir(parents=True, exist_ok=True)
    
    print(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ: {args.trigger_word}")
    print(f"üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_count}")
    print(f"üî¢ –®–∞–≥–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {steps}")
    print("")
    
    # –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    start_time = time.time()
    return_code = run_training(config_path)
    
    training_time = time.time() - start_time
    hours = int(training_time // 3600)
    minutes = int((training_time % 3600) // 60)
    
    if return_code == 0:
        print("=" * 60)
        print("üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {hours}—á {minutes}–º")
        print(f"üìÅ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {args.output_dir}")
        print("=" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        output_path = Path(args.output_dir)
        lora_files = list(output_path.glob("*.safetensors"))
        if lora_files:
            print("üì¶ –°–æ–∑–¥–∞–Ω–Ω—ã–µ LoRA —Ñ–∞–π–ª—ã:")
            for lora_file in lora_files:
                print(f"   ‚Ä¢ {lora_file.name}")
    else:
        print("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(return_code)

if __name__ == "__main__":
    main()